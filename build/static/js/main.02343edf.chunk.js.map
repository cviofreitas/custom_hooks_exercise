{"version":3,"sources":["back.png","hooks/useFlip.js","PlayingCard.js","hooks/useAxios.js","PlayingCardList.js","pokemonList.js","PokemonSelect.js","helpers.js","PokemonCard.js","PokeDex.js","CardTable.js","App.js","serviceWorker.js","index.js"],"names":["useFlip","useState","isFlipped","setIsFlipped","flipped","PlayingCard","front","back","backOfCard","flip","src","alt","onClick","className","useAxios","baseURL","extension","cards","setCards","addCard","axios","get","response","data","id","uuid","CardTable","map","cardData","image","defaultProps","pokemon","PokemonSelect","add","pokemonList","pokeIdx","setPokeIdx","onChange","evt","target","value","p","idx","values","Math","floor","random","length","PokemonCard","name","stats","stat","PokeDex","setPokemon","addPokemon","sprites","front_default","back_default","base_stat","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02343edf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/back.6ae65018.png\";","import React, { useState } from 'react'\n\nconst useFlip = () => {\n    const [isFlipped, setIsFlipped] = useState(true)\n    const flip = () => {\n        setIsFlipped(flipped => !flipped)\n    }\n    return [isFlipped, flip];\n}\n\nexport default useFlip","import React, { useState } from \"react\";\nimport backOfCard from \"./back.png\";\nimport \"./PlayingCard.css\"\nimport useFlip from \"./hooks/useFlip\";\n\n/* Renders a single playing card. */\nfunction PlayingCard({ front, back = backOfCard }) {\n  const [isFlipped, flip] = useFlip(false)\n\n  return (\n    <img\n      src={isFlipped ? front : back}\n      alt=\"playing card\"\n      onClick={flip}\n      className=\"PlayingCard Card\"\n    />\n  );\n}\n\nexport default PlayingCard;\n","import React, { useState } from 'react';\nimport uuid from \"uuid\";\nimport axios from \"axios\";\n\nconst useAxios = (baseURL, extension) => {\n    const [cards, setCards] = useState([]);\n    const addCard = async () => {\n        if (extension) {\n            const response = await axios.get(\n                `${baseURL}${extension}/`\n            );\n            setCards(cards => [...cards, { ...response.data, id: uuid() }]);\n        }\n        else {\n\n            const response = await axios.get(\n                baseURL\n            );\n            setCards(cards => [...cards, { ...response.data, id: uuid() }]);\n        }\n\n    };\n\n    return [cards, addCard]\n}\n\nexport default useAxios","import React, { useState } from \"react\";\nimport PlayingCard from \"./PlayingCard\";\nimport \"./PlayingCardList.css\";\nimport useAxios from \"./hooks/useAxios\";\n\n/* Renders a list of playing cards.\n * Can also add a new card at random. */\nfunction CardTable() {\n  const [cards, addCard] = useAxios('https://deckofcardsapi.com/api/deck/new/draw/')\n  return (\n    <div className=\"PlayingCardList\">\n      <h3>Pick a card, any card!</h3>\n      <div>\n        <button onClick={addCard}>Add a playing card!</button>\n      </div>\n      <div className=\"PlayingCardList-card-area\">\n        {cards.map(cardData => (\n          <PlayingCard key={cardData.id} front={cardData.cards[0].image} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nCardTable.defaultProps = {};\n\nexport default CardTable;\n","/* list of common pokemon for the PokemonSelect component. */\nconst pokemon = [\n  \"pikachu\",\n  \"jigglypuff\",\n  \"charizard\",\n  \"gengar\",\n  \"arcanine\",\n  \"bulbasaur\",\n  \"blaziken\",\n  \"umbreon\",\n  \"lucario\",\n  \"gardevoir\",\n  \"eevee\",\n  \"dragonite\",\n  \"absol\",\n  \"typhlosion\",\n  \"ampharos\",\n  \"squirtle\",\n  \"flygon\",\n  \"ninetales\",\n  \"tyranitar\",\n  \"infernape\",\n  \"snorlax\",\n  \"torterra\",\n  \"luxray\",\n  \"scizor\",\n  \"blastoise\",\n  \"mudkip\",\n  \"garchomp\"\n];\n\nexport default pokemon;\n","import React, { useState } from \"react\";\nimport pokemonList from \"./pokemonList\";\nimport { choice } from \"./helpers\";\n\n/* Select element to choose from common pokemon. */\nfunction PokemonSelect({ add, pokemon = pokemonList }) {\n  const [pokeIdx, setPokeIdx] = useState(0);\n  const handleChange = evt => {\n    setPokeIdx(evt.target.value);\n  };\n\n  return (\n    <div>\n      <select onChange={handleChange}>\n        {pokemon.map((p, idx) => (\n          <option key={idx} value={idx}>\n            {p}\n          </option>\n        ))}\n      </select>\n      <button onClick={() => add(pokemon[pokeIdx])}>Catch one!</button>\n      <button onClick={() => add(choice(pokemon))}>I'm feeling lucky</button>\n    </div>\n  );\n}\n\nexport default PokemonSelect;\n","/* Select a random element from values array. */\nfunction choice(values) {\n  const randIdx = Math.floor(Math.random() * values.length);\n  return values[randIdx];\n}\n\nexport { choice };","import React, { useState } from \"react\";\nimport \"./PokemonCard.css\";\nimport useFlip from \"./hooks/useFlip\";\n\n/* Renders a single pokemon card. */\nfunction PokemonCard({ front, back, name, stats }) {\n  const [isFlipped, flip] = useFlip(false)\n\n  return (\n    <div onClick={flip} className=\"PokemonCard Card\">\n      {isFlipped ? (\n        <div className=\"PokemonCard-front\">\n          <img src={front} alt={`{name} front`} />\n          <div>\n            <p className=\"PokemonCard-name\">{name}</p>\n            <ul className=\"PokemonCard-stats\">\n              {stats.map(stat => (\n                <li key={stat.name}>\n                  <em>{stat.name}</em>: {stat.value}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <div className=\"PokemonCard-back\">\n          <img src={back} alt={`{name} back`} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default PokemonCard;\n","import React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport axios from \"axios\";\nimport PokemonSelect from \"./PokemonSelect\";\nimport PokemonCard from \"./PokemonCard\";\nimport \"./PokeDex.css\";\n\n/* Renders a list of pokemon cards.\n * Can also add a new card at random,\n * or from a dropdown of available pokemon. */\nfunction PokeDex() {\n\n  const [pokemon, setPokemon] = useState([]);\n  const addPokemon = async name => {\n    const response = await axios.get(\n      `https://pokeapi.co/api/v2/pokemon/${name}/`\n    );\n    setPokemon(pokemon => [...pokemon, { ...response.data, id: uuid() }]);\n  };\n  return (\n    <div className=\"PokeDex\">\n      <div className=\"PokeDex-buttons\">\n        <h3>Please select your pokemon:</h3>\n        <PokemonSelect add={addPokemon} />\n      </div>\n      <div className=\"PokeDex-card-area\">\n        {pokemon.map(cardData => (\n          <PokemonCard\n            key={cardData.id}\n            front={cardData.sprites.front_default}\n            back={cardData.sprites.back_default}\n            name={cardData.name}\n            stats={cardData.stats.map(stat => ({\n              value: stat.base_stat,\n              name: stat.stat.name\n            }))}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PokeDex;\n","import React from \"react\";\nimport PlayingCardList from \"./PlayingCardList\";\nimport PokeDex from \"./PokeDex\";\nimport \"./CardTable.css\";\n\n/* Main component. Renders card lists for\n * playing cards and pokemon. */\nfunction CardTable() {\n  return (\n    <div className=\"CardTable\">\n      <header>\n        <h1 className=\"CardTable-heading\">Check out all my cards.</h1>\n      </header>\n      <main>\n        <PlayingCardList />\n        <PokeDex />\n      </main>\n    </div>\n  );\n}\n\nexport default CardTable;\n","import React from \"react\";\nimport CardTable from \"./CardTable\";\n\nfunction App() {\n  return (\n    <CardTable />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}